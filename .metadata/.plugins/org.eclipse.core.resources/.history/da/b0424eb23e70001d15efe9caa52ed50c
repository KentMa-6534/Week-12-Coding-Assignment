import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.params.provider.Arguments.arguments;
import static org.mockito.ArgumentMatchers.intThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;;

class TestDemoTest {
	private TestDemo testDemo;
	@BeforeEach
	void setUp(){
		testDemo = new TestDemo();
	}

	@ParameterizedTest
	@MethodSource("TestDemoTest#argumentsForAddPositive")
	void assertThatTwoPositiveNumbersAreAddedCorrectly(int a, int b, int expected, Boolean expectException) {
		//Given: two integers to test
		if(!expectException) {
		//When: the integers are greater than zero	
			assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
		}
		else {
		//When: the integers are less than or equal to zero	
			assertThatThrownBy(() -> testDemo.addPositive(a,b)).isInstanceOf(IllegalArgumentException.class);
		}
	}
	@Test
	void assertThatNumberSquaredIsCorrect() {
		TestDemo mockDemo = spy(testDemo);
		doReturn(5).when(mockDemo).getRandomInt();
		int fiveSquared = mockDemo.randomNumberSquared();
		assertThat(fiveSquared).isEqualTo(25);
	}
	static Stream<Arguments> argumentsForAddPositive(){
	    // @formatter:off
		return Stream.of(
		arguments(2,4,6, false),		
		arguments(10,15,25, false),
		arguments(-5,-7,-12, true),		
		arguments(0, 5, 5, true)		
		);
	    // @formatter:on
	}
	
}
